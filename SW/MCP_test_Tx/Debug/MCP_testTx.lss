
MCP_testTx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001404  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000b5f  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 20 06 	call	0xc40	; 0xc40 <main>
  64:	0c 94 51 06 	jmp	0xca2	; 0xca2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_VidInit>:
#include "STD_TYPE.h"
#include "BIT_MATH.h"
#include "DIO_private.h"

void DIO_VidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

}
  74:	cf 91       	pop	r28
  76:	df 91       	pop	r29
  78:	08 95       	ret

0000007a <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 Copy_U8Port, u8 Copy_U8Direction)
{
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	00 d0       	rcall	.+0      	; 0x80 <DIO_VidSetPortDirection+0x6>
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_VidSetPortDirection+0x8>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_U8Port)
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	28 2f       	mov	r18, r24
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	3c 83       	std	Y+4, r19	; 0x04
  92:	2b 83       	std	Y+3, r18	; 0x03
  94:	8b 81       	ldd	r24, Y+3	; 0x03
  96:	9c 81       	ldd	r25, Y+4	; 0x04
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	91 05       	cpc	r25, r1
  9c:	d1 f0       	breq	.+52     	; 0xd2 <DIO_VidSetPortDirection+0x58>
  9e:	2b 81       	ldd	r18, Y+3	; 0x03
  a0:	3c 81       	ldd	r19, Y+4	; 0x04
  a2:	22 30       	cpi	r18, 0x02	; 2
  a4:	31 05       	cpc	r19, r1
  a6:	2c f4       	brge	.+10     	; 0xb2 <DIO_VidSetPortDirection+0x38>
  a8:	8b 81       	ldd	r24, Y+3	; 0x03
  aa:	9c 81       	ldd	r25, Y+4	; 0x04
  ac:	00 97       	sbiw	r24, 0x00	; 0
  ae:	61 f0       	breq	.+24     	; 0xc8 <DIO_VidSetPortDirection+0x4e>
  b0:	1e c0       	rjmp	.+60     	; 0xee <DIO_VidSetPortDirection+0x74>
  b2:	2b 81       	ldd	r18, Y+3	; 0x03
  b4:	3c 81       	ldd	r19, Y+4	; 0x04
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	81 f0       	breq	.+32     	; 0xdc <DIO_VidSetPortDirection+0x62>
  bc:	8b 81       	ldd	r24, Y+3	; 0x03
  be:	9c 81       	ldd	r25, Y+4	; 0x04
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	91 05       	cpc	r25, r1
  c4:	81 f0       	breq	.+32     	; 0xe6 <DIO_VidSetPortDirection+0x6c>
  c6:	13 c0       	rjmp	.+38     	; 0xee <DIO_VidSetPortDirection+0x74>
    {
        case 0 :    DDRA = Copy_U8Direction; break;
  c8:	ea e3       	ldi	r30, 0x3A	; 58
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	80 83       	st	Z, r24
  d0:	0e c0       	rjmp	.+28     	; 0xee <DIO_VidSetPortDirection+0x74>
        case 1 :    DDRB = Copy_U8Direction; break;
  d2:	e7 e3       	ldi	r30, 0x37	; 55
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	80 83       	st	Z, r24
  da:	09 c0       	rjmp	.+18     	; 0xee <DIO_VidSetPortDirection+0x74>
        case 2 :    DDRC = Copy_U8Direction; break;
  dc:	e4 e3       	ldi	r30, 0x34	; 52
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	80 83       	st	Z, r24
  e4:	04 c0       	rjmp	.+8      	; 0xee <DIO_VidSetPortDirection+0x74>
        case 3 :    DDRD = Copy_U8Direction; break;
  e6:	e1 e3       	ldi	r30, 0x31	; 49
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	80 83       	st	Z, r24
    }
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_U8Port, u8 Copy_U8Pin, u8 Copy_U8Direction)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	27 97       	sbiw	r28, 0x07	; 7
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	6a 83       	std	Y+2, r22	; 0x02
 114:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_U8Direction == 1)
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	09 f0       	breq	.+2      	; 0x11e <DIO_VidSetPinDirection+0x22>
 11c:	6f c0       	rjmp	.+222    	; 0x1fc <DIO_VidSetPinDirection+0x100>
    {
        switch (Copy_U8Port)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	3f 83       	std	Y+7, r19	; 0x07
 126:	2e 83       	std	Y+6, r18	; 0x06
 128:	8e 81       	ldd	r24, Y+6	; 0x06
 12a:	9f 81       	ldd	r25, Y+7	; 0x07
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	91 05       	cpc	r25, r1
 130:	49 f1       	breq	.+82     	; 0x184 <DIO_VidSetPinDirection+0x88>
 132:	2e 81       	ldd	r18, Y+6	; 0x06
 134:	3f 81       	ldd	r19, Y+7	; 0x07
 136:	22 30       	cpi	r18, 0x02	; 2
 138:	31 05       	cpc	r19, r1
 13a:	2c f4       	brge	.+10     	; 0x146 <DIO_VidSetPinDirection+0x4a>
 13c:	8e 81       	ldd	r24, Y+6	; 0x06
 13e:	9f 81       	ldd	r25, Y+7	; 0x07
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	61 f0       	breq	.+24     	; 0x15c <DIO_VidSetPinDirection+0x60>
 144:	d2 c0       	rjmp	.+420    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
 146:	2e 81       	ldd	r18, Y+6	; 0x06
 148:	3f 81       	ldd	r19, Y+7	; 0x07
 14a:	22 30       	cpi	r18, 0x02	; 2
 14c:	31 05       	cpc	r19, r1
 14e:	71 f1       	breq	.+92     	; 0x1ac <DIO_VidSetPinDirection+0xb0>
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	9f 81       	ldd	r25, Y+7	; 0x07
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	91 05       	cpc	r25, r1
 158:	e9 f1       	breq	.+122    	; 0x1d4 <DIO_VidSetPinDirection+0xd8>
 15a:	c7 c0       	rjmp	.+398    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
        {
            case 0 : SET_BIT(DDRA,Copy_U8Pin); break;
 15c:	aa e3       	ldi	r26, 0x3A	; 58
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ea e3       	ldi	r30, 0x3A	; 58
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	48 2f       	mov	r20, r24
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_VidSetPinDirection+0x7e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_VidSetPinDirection+0x7a>
 17e:	84 2b       	or	r24, r20
 180:	8c 93       	st	X, r24
 182:	b3 c0       	rjmp	.+358    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
            case 1 : SET_BIT(DDRB,Copy_U8Pin); break;
 184:	a7 e3       	ldi	r26, 0x37	; 55
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	e7 e3       	ldi	r30, 0x37	; 55
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	48 2f       	mov	r20, r24
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 2e       	mov	r0, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_VidSetPinDirection+0xa6>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_VidSetPinDirection+0xa2>
 1a6:	84 2b       	or	r24, r20
 1a8:	8c 93       	st	X, r24
 1aa:	9f c0       	rjmp	.+318    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
            case 2 : SET_BIT(DDRC,Copy_U8Pin); break;
 1ac:	a4 e3       	ldi	r26, 0x34	; 52
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e4 e3       	ldi	r30, 0x34	; 52
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_VidSetPinDirection+0xce>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_VidSetPinDirection+0xca>
 1ce:	84 2b       	or	r24, r20
 1d0:	8c 93       	st	X, r24
 1d2:	8b c0       	rjmp	.+278    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
            case 3 : SET_BIT(DDRD,Copy_U8Pin); break;
 1d4:	a1 e3       	ldi	r26, 0x31	; 49
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e1 e3       	ldi	r30, 0x31	; 49
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_VidSetPinDirection+0xf6>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_VidSetPinDirection+0xf2>
 1f6:	84 2b       	or	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	77 c0       	rjmp	.+238    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
        }
    }
    else if (Copy_U8Direction == 0)
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	88 23       	and	r24, r24
 200:	09 f0       	breq	.+2      	; 0x204 <DIO_VidSetPinDirection+0x108>
 202:	73 c0       	rjmp	.+230    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
    {
        switch (Copy_U8Port)
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	3d 83       	std	Y+5, r19	; 0x05
 20c:	2c 83       	std	Y+4, r18	; 0x04
 20e:	8c 81       	ldd	r24, Y+4	; 0x04
 210:	9d 81       	ldd	r25, Y+5	; 0x05
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	91 05       	cpc	r25, r1
 216:	59 f1       	breq	.+86     	; 0x26e <DIO_VidSetPinDirection+0x172>
 218:	2c 81       	ldd	r18, Y+4	; 0x04
 21a:	3d 81       	ldd	r19, Y+5	; 0x05
 21c:	22 30       	cpi	r18, 0x02	; 2
 21e:	31 05       	cpc	r19, r1
 220:	2c f4       	brge	.+10     	; 0x22c <DIO_VidSetPinDirection+0x130>
 222:	8c 81       	ldd	r24, Y+4	; 0x04
 224:	9d 81       	ldd	r25, Y+5	; 0x05
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	69 f0       	breq	.+26     	; 0x244 <DIO_VidSetPinDirection+0x148>
 22a:	5f c0       	rjmp	.+190    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
 22c:	2c 81       	ldd	r18, Y+4	; 0x04
 22e:	3d 81       	ldd	r19, Y+5	; 0x05
 230:	22 30       	cpi	r18, 0x02	; 2
 232:	31 05       	cpc	r19, r1
 234:	89 f1       	breq	.+98     	; 0x298 <DIO_VidSetPinDirection+0x19c>
 236:	8c 81       	ldd	r24, Y+4	; 0x04
 238:	9d 81       	ldd	r25, Y+5	; 0x05
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	91 05       	cpc	r25, r1
 23e:	09 f4       	brne	.+2      	; 0x242 <DIO_VidSetPinDirection+0x146>
 240:	40 c0       	rjmp	.+128    	; 0x2c2 <DIO_VidSetPinDirection+0x1c6>
 242:	53 c0       	rjmp	.+166    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
        {
            case 0 : CLR_BIT(DDRA,Copy_U8Pin); break;
 244:	aa e3       	ldi	r26, 0x3A	; 58
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	ea e3       	ldi	r30, 0x3A	; 58
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_VidSetPinDirection+0x166>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_VidSetPinDirection+0x162>
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	8c 93       	st	X, r24
 26c:	3e c0       	rjmp	.+124    	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
            case 1 : CLR_BIT(DDRB,Copy_U8Pin); break;
 26e:	a7 e3       	ldi	r26, 0x37	; 55
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	e7 e3       	ldi	r30, 0x37	; 55
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 2e       	mov	r0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_VidSetPinDirection+0x190>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_VidSetPinDirection+0x18c>
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	8c 93       	st	X, r24
 296:	29 c0       	rjmp	.+82     	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
            case 2 : CLR_BIT(DDRC,Copy_U8Pin); break;
 298:	a4 e3       	ldi	r26, 0x34	; 52
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e4 e3       	ldi	r30, 0x34	; 52
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_VidSetPinDirection+0x1ba>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_VidSetPinDirection+0x1b6>
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	8c 93       	st	X, r24
 2c0:	14 c0       	rjmp	.+40     	; 0x2ea <DIO_VidSetPinDirection+0x1ee>
            case 3 : CLR_BIT(DDRD,Copy_U8Pin); break;
 2c2:	a1 e3       	ldi	r26, 0x31	; 49
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e1 e3       	ldi	r30, 0x31	; 49
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_VidSetPinDirection+0x1e4>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_VidSetPinDirection+0x1e0>
 2e4:	80 95       	com	r24
 2e6:	84 23       	and	r24, r20
 2e8:	8c 93       	st	X, r24
    }
    else
    {

    }
}
 2ea:	27 96       	adiw	r28, 0x07	; 7
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	08 95       	ret

000002fc <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 Copy_U8Port, u8 Copy_U8Value)
{
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	00 d0       	rcall	.+0      	; 0x302 <DIO_VidSetPortValue+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <DIO_VidSetPortValue+0x8>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_U8Port)
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	3c 83       	std	Y+4, r19	; 0x04
 314:	2b 83       	std	Y+3, r18	; 0x03
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	9c 81       	ldd	r25, Y+4	; 0x04
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	91 05       	cpc	r25, r1
 31e:	d1 f0       	breq	.+52     	; 0x354 <DIO_VidSetPortValue+0x58>
 320:	2b 81       	ldd	r18, Y+3	; 0x03
 322:	3c 81       	ldd	r19, Y+4	; 0x04
 324:	22 30       	cpi	r18, 0x02	; 2
 326:	31 05       	cpc	r19, r1
 328:	2c f4       	brge	.+10     	; 0x334 <DIO_VidSetPortValue+0x38>
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	61 f0       	breq	.+24     	; 0x34a <DIO_VidSetPortValue+0x4e>
 332:	1e c0       	rjmp	.+60     	; 0x370 <DIO_VidSetPortValue+0x74>
 334:	2b 81       	ldd	r18, Y+3	; 0x03
 336:	3c 81       	ldd	r19, Y+4	; 0x04
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	81 f0       	breq	.+32     	; 0x35e <DIO_VidSetPortValue+0x62>
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	9c 81       	ldd	r25, Y+4	; 0x04
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	91 05       	cpc	r25, r1
 346:	81 f0       	breq	.+32     	; 0x368 <DIO_VidSetPortValue+0x6c>
 348:	13 c0       	rjmp	.+38     	; 0x370 <DIO_VidSetPortValue+0x74>
    {
        case 0 :    PORTA = Copy_U8Value; break;
 34a:	eb e3       	ldi	r30, 0x3B	; 59
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	80 83       	st	Z, r24
 352:	0e c0       	rjmp	.+28     	; 0x370 <DIO_VidSetPortValue+0x74>
        case 1 :    PORTB = Copy_U8Value; break;
 354:	e8 e3       	ldi	r30, 0x38	; 56
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	80 83       	st	Z, r24
 35c:	09 c0       	rjmp	.+18     	; 0x370 <DIO_VidSetPortValue+0x74>
        case 2 :    PORTC = Copy_U8Value; break;
 35e:	e5 e3       	ldi	r30, 0x35	; 53
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	80 83       	st	Z, r24
 366:	04 c0       	rjmp	.+8      	; 0x370 <DIO_VidSetPortValue+0x74>
        case 3 :    PORTD = Copy_U8Value; break;
 368:	e2 e3       	ldi	r30, 0x32	; 50
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	80 83       	st	Z, r24
    }
}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 Copy_U8Port, u8 Copy_U8Pin , u8 Copy_U8Value)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	27 97       	sbiw	r28, 0x07	; 7
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	89 83       	std	Y+1, r24	; 0x01
 394:	6a 83       	std	Y+2, r22	; 0x02
 396:	4b 83       	std	Y+3, r20	; 0x03
    if (1 == Copy_U8Value)
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	09 f0       	breq	.+2      	; 0x3a0 <DIO_VidSetPinValue+0x22>
 39e:	6f c0       	rjmp	.+222    	; 0x47e <DIO_VidSetPinValue+0x100>
    {
        switch(Copy_U8Port)
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	3f 83       	std	Y+7, r19	; 0x07
 3a8:	2e 83       	std	Y+6, r18	; 0x06
 3aa:	8e 81       	ldd	r24, Y+6	; 0x06
 3ac:	9f 81       	ldd	r25, Y+7	; 0x07
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	91 05       	cpc	r25, r1
 3b2:	49 f1       	breq	.+82     	; 0x406 <DIO_VidSetPinValue+0x88>
 3b4:	2e 81       	ldd	r18, Y+6	; 0x06
 3b6:	3f 81       	ldd	r19, Y+7	; 0x07
 3b8:	22 30       	cpi	r18, 0x02	; 2
 3ba:	31 05       	cpc	r19, r1
 3bc:	2c f4       	brge	.+10     	; 0x3c8 <DIO_VidSetPinValue+0x4a>
 3be:	8e 81       	ldd	r24, Y+6	; 0x06
 3c0:	9f 81       	ldd	r25, Y+7	; 0x07
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	61 f0       	breq	.+24     	; 0x3de <DIO_VidSetPinValue+0x60>
 3c6:	d2 c0       	rjmp	.+420    	; 0x56c <DIO_VidSetPinValue+0x1ee>
 3c8:	2e 81       	ldd	r18, Y+6	; 0x06
 3ca:	3f 81       	ldd	r19, Y+7	; 0x07
 3cc:	22 30       	cpi	r18, 0x02	; 2
 3ce:	31 05       	cpc	r19, r1
 3d0:	71 f1       	breq	.+92     	; 0x42e <DIO_VidSetPinValue+0xb0>
 3d2:	8e 81       	ldd	r24, Y+6	; 0x06
 3d4:	9f 81       	ldd	r25, Y+7	; 0x07
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	91 05       	cpc	r25, r1
 3da:	e9 f1       	breq	.+122    	; 0x456 <DIO_VidSetPinValue+0xd8>
 3dc:	c7 c0       	rjmp	.+398    	; 0x56c <DIO_VidSetPinValue+0x1ee>
        {
            case 0 : SET_BIT(PORTA,Copy_U8Pin); break;
 3de:	ab e3       	ldi	r26, 0x3B	; 59
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	eb e3       	ldi	r30, 0x3B	; 59
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_VidSetPinValue+0x7e>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_VidSetPinValue+0x7a>
 400:	84 2b       	or	r24, r20
 402:	8c 93       	st	X, r24
 404:	b3 c0       	rjmp	.+358    	; 0x56c <DIO_VidSetPinValue+0x1ee>
            case 1 : SET_BIT(PORTB,Copy_U8Pin); break;
 406:	a8 e3       	ldi	r26, 0x38	; 56
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e8 e3       	ldi	r30, 0x38	; 56
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	48 2f       	mov	r20, r24
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 2e       	mov	r0, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_VidSetPinValue+0xa6>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_VidSetPinValue+0xa2>
 428:	84 2b       	or	r24, r20
 42a:	8c 93       	st	X, r24
 42c:	9f c0       	rjmp	.+318    	; 0x56c <DIO_VidSetPinValue+0x1ee>
            case 2 : SET_BIT(PORTC,Copy_U8Pin); break;
 42e:	a5 e3       	ldi	r26, 0x35	; 53
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	e5 e3       	ldi	r30, 0x35	; 53
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	48 2f       	mov	r20, r24
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	28 2f       	mov	r18, r24
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 2e       	mov	r0, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_VidSetPinValue+0xce>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	0a 94       	dec	r0
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_VidSetPinValue+0xca>
 450:	84 2b       	or	r24, r20
 452:	8c 93       	st	X, r24
 454:	8b c0       	rjmp	.+278    	; 0x56c <DIO_VidSetPinValue+0x1ee>
            case 3 : SET_BIT(PORTD,Copy_U8Pin); break;            
 456:	a2 e3       	ldi	r26, 0x32	; 50
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	e2 e3       	ldi	r30, 0x32	; 50
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	48 2f       	mov	r20, r24
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	28 2f       	mov	r18, r24
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 2e       	mov	r0, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_VidSetPinValue+0xf6>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_VidSetPinValue+0xf2>
 478:	84 2b       	or	r24, r20
 47a:	8c 93       	st	X, r24
 47c:	77 c0       	rjmp	.+238    	; 0x56c <DIO_VidSetPinValue+0x1ee>
        }
    }
    else if (0== Copy_U8Value)
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	88 23       	and	r24, r24
 482:	09 f0       	breq	.+2      	; 0x486 <DIO_VidSetPinValue+0x108>
 484:	73 c0       	rjmp	.+230    	; 0x56c <DIO_VidSetPinValue+0x1ee>
    {
        switch (Copy_U8Port)
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	3d 83       	std	Y+5, r19	; 0x05
 48e:	2c 83       	std	Y+4, r18	; 0x04
 490:	8c 81       	ldd	r24, Y+4	; 0x04
 492:	9d 81       	ldd	r25, Y+5	; 0x05
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	91 05       	cpc	r25, r1
 498:	59 f1       	breq	.+86     	; 0x4f0 <DIO_VidSetPinValue+0x172>
 49a:	2c 81       	ldd	r18, Y+4	; 0x04
 49c:	3d 81       	ldd	r19, Y+5	; 0x05
 49e:	22 30       	cpi	r18, 0x02	; 2
 4a0:	31 05       	cpc	r19, r1
 4a2:	2c f4       	brge	.+10     	; 0x4ae <DIO_VidSetPinValue+0x130>
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	9d 81       	ldd	r25, Y+5	; 0x05
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	69 f0       	breq	.+26     	; 0x4c6 <DIO_VidSetPinValue+0x148>
 4ac:	5f c0       	rjmp	.+190    	; 0x56c <DIO_VidSetPinValue+0x1ee>
 4ae:	2c 81       	ldd	r18, Y+4	; 0x04
 4b0:	3d 81       	ldd	r19, Y+5	; 0x05
 4b2:	22 30       	cpi	r18, 0x02	; 2
 4b4:	31 05       	cpc	r19, r1
 4b6:	89 f1       	breq	.+98     	; 0x51a <DIO_VidSetPinValue+0x19c>
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	9d 81       	ldd	r25, Y+5	; 0x05
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	91 05       	cpc	r25, r1
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <DIO_VidSetPinValue+0x146>
 4c2:	40 c0       	rjmp	.+128    	; 0x544 <DIO_VidSetPinValue+0x1c6>
 4c4:	53 c0       	rjmp	.+166    	; 0x56c <DIO_VidSetPinValue+0x1ee>
        {
            case 0 : CLR_BIT(PORTA,Copy_U8Pin); break;
 4c6:	ab e3       	ldi	r26, 0x3B	; 59
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	eb e3       	ldi	r30, 0x3B	; 59
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	48 2f       	mov	r20, r24
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 2e       	mov	r0, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_VidSetPinValue+0x166>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_VidSetPinValue+0x162>
 4e8:	80 95       	com	r24
 4ea:	84 23       	and	r24, r20
 4ec:	8c 93       	st	X, r24
 4ee:	3e c0       	rjmp	.+124    	; 0x56c <DIO_VidSetPinValue+0x1ee>
            case 1 : CLR_BIT(PORTB,Copy_U8Pin); break;
 4f0:	a8 e3       	ldi	r26, 0x38	; 56
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	e8 e3       	ldi	r30, 0x38	; 56
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	48 2f       	mov	r20, r24
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 2e       	mov	r0, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_VidSetPinValue+0x190>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_VidSetPinValue+0x18c>
 512:	80 95       	com	r24
 514:	84 23       	and	r24, r20
 516:	8c 93       	st	X, r24
 518:	29 c0       	rjmp	.+82     	; 0x56c <DIO_VidSetPinValue+0x1ee>
            case 2 : CLR_BIT(PORTC,Copy_U8Pin); break;
 51a:	a5 e3       	ldi	r26, 0x35	; 53
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e5 e3       	ldi	r30, 0x35	; 53
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	48 2f       	mov	r20, r24
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_VidSetPinValue+0x1ba>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_VidSetPinValue+0x1b6>
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	8c 93       	st	X, r24
 542:	14 c0       	rjmp	.+40     	; 0x56c <DIO_VidSetPinValue+0x1ee>
            case 3 : CLR_BIT(PORTD,Copy_U8Pin); break;
 544:	a2 e3       	ldi	r26, 0x32	; 50
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e2 e3       	ldi	r30, 0x32	; 50
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	48 2f       	mov	r20, r24
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_VidSetPinValue+0x1e4>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_VidSetPinValue+0x1e0>
 566:	80 95       	com	r24
 568:	84 23       	and	r24, r20
 56a:	8c 93       	st	X, r24
        } 
    }
}
 56c:	27 96       	adiw	r28, 0x07	; 7
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	cf 91       	pop	r28
 57a:	df 91       	pop	r29
 57c:	08 95       	ret

0000057e <DIO_VidTogglePin>:

void DIO_VidTogglePin(u8 Copy_U8Port, u8 Copy_U8Pin)
{
 57e:	df 93       	push	r29
 580:	cf 93       	push	r28
 582:	00 d0       	rcall	.+0      	; 0x584 <DIO_VidTogglePin+0x6>
 584:	00 d0       	rcall	.+0      	; 0x586 <DIO_VidTogglePin+0x8>
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	89 83       	std	Y+1, r24	; 0x01
 58c:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	3c 83       	std	Y+4, r19	; 0x04
 596:	2b 83       	std	Y+3, r18	; 0x03
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	9c 81       	ldd	r25, Y+4	; 0x04
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	91 05       	cpc	r25, r1
 5a0:	49 f1       	breq	.+82     	; 0x5f4 <DIO_VidTogglePin+0x76>
 5a2:	2b 81       	ldd	r18, Y+3	; 0x03
 5a4:	3c 81       	ldd	r19, Y+4	; 0x04
 5a6:	22 30       	cpi	r18, 0x02	; 2
 5a8:	31 05       	cpc	r19, r1
 5aa:	2c f4       	brge	.+10     	; 0x5b6 <DIO_VidTogglePin+0x38>
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	9c 81       	ldd	r25, Y+4	; 0x04
 5b0:	00 97       	sbiw	r24, 0x00	; 0
 5b2:	61 f0       	breq	.+24     	; 0x5cc <DIO_VidTogglePin+0x4e>
 5b4:	5a c0       	rjmp	.+180    	; 0x66a <DIO_VidTogglePin+0xec>
 5b6:	2b 81       	ldd	r18, Y+3	; 0x03
 5b8:	3c 81       	ldd	r19, Y+4	; 0x04
 5ba:	22 30       	cpi	r18, 0x02	; 2
 5bc:	31 05       	cpc	r19, r1
 5be:	71 f1       	breq	.+92     	; 0x61c <DIO_VidTogglePin+0x9e>
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	9c 81       	ldd	r25, Y+4	; 0x04
 5c4:	83 30       	cpi	r24, 0x03	; 3
 5c6:	91 05       	cpc	r25, r1
 5c8:	e9 f1       	breq	.+122    	; 0x644 <DIO_VidTogglePin+0xc6>
 5ca:	4f c0       	rjmp	.+158    	; 0x66a <DIO_VidTogglePin+0xec>
    {
        case 0 : TOGGLE_BIT(PORTA,Copy_U8Pin); break;
 5cc:	ab e3       	ldi	r26, 0x3B	; 59
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	eb e3       	ldi	r30, 0x3B	; 59
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	48 2f       	mov	r20, r24
 5d8:	8a 81       	ldd	r24, Y+2	; 0x02
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 2e       	mov	r0, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_VidTogglePin+0x6c>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	0a 94       	dec	r0
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_VidTogglePin+0x68>
 5ee:	84 27       	eor	r24, r20
 5f0:	8c 93       	st	X, r24
 5f2:	3b c0       	rjmp	.+118    	; 0x66a <DIO_VidTogglePin+0xec>
        case 1 : TOGGLE_BIT(PORTB,Copy_U8Pin); break;
 5f4:	a8 e3       	ldi	r26, 0x38	; 56
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e8 e3       	ldi	r30, 0x38	; 56
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	48 2f       	mov	r20, r24
 600:	8a 81       	ldd	r24, Y+2	; 0x02
 602:	28 2f       	mov	r18, r24
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 2e       	mov	r0, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_VidTogglePin+0x94>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	0a 94       	dec	r0
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_VidTogglePin+0x90>
 616:	84 27       	eor	r24, r20
 618:	8c 93       	st	X, r24
 61a:	27 c0       	rjmp	.+78     	; 0x66a <DIO_VidTogglePin+0xec>
        case 2 : TOGGLE_BIT(PORTC,Copy_U8Pin); break;
 61c:	a5 e3       	ldi	r26, 0x35	; 53
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	e5 e3       	ldi	r30, 0x35	; 53
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	48 2f       	mov	r20, r24
 628:	8a 81       	ldd	r24, Y+2	; 0x02
 62a:	28 2f       	mov	r18, r24
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 2e       	mov	r0, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_VidTogglePin+0xbc>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	0a 94       	dec	r0
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_VidTogglePin+0xb8>
 63e:	84 27       	eor	r24, r20
 640:	8c 93       	st	X, r24
 642:	13 c0       	rjmp	.+38     	; 0x66a <DIO_VidTogglePin+0xec>
        case 3 : TOGGLE_BIT(PORTD,Copy_U8Pin); break;
 644:	a2 e3       	ldi	r26, 0x32	; 50
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e2 e3       	ldi	r30, 0x32	; 50
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	48 2f       	mov	r20, r24
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 2e       	mov	r0, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_VidTogglePin+0xe4>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	0a 94       	dec	r0
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_VidTogglePin+0xe0>
 666:	84 27       	eor	r24, r20
 668:	8c 93       	st	X, r24
    } 
}
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	cf 91       	pop	r28
 674:	df 91       	pop	r29
 676:	08 95       	ret

00000678 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_U8Port, u8 Copy_U8Pin)
{
 678:	df 93       	push	r29
 67a:	cf 93       	push	r28
 67c:	00 d0       	rcall	.+0      	; 0x67e <DIO_U8GetPinValue+0x6>
 67e:	00 d0       	rcall	.+0      	; 0x680 <DIO_U8GetPinValue+0x8>
 680:	0f 92       	push	r0
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	8a 83       	std	Y+2, r24	; 0x02
 688:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_U8Value;
    switch (Copy_U8Port)
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	28 2f       	mov	r18, r24
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	3d 83       	std	Y+5, r19	; 0x05
 692:	2c 83       	std	Y+4, r18	; 0x04
 694:	4c 81       	ldd	r20, Y+4	; 0x04
 696:	5d 81       	ldd	r21, Y+5	; 0x05
 698:	41 30       	cpi	r20, 0x01	; 1
 69a:	51 05       	cpc	r21, r1
 69c:	41 f1       	breq	.+80     	; 0x6ee <DIO_U8GetPinValue+0x76>
 69e:	8c 81       	ldd	r24, Y+4	; 0x04
 6a0:	9d 81       	ldd	r25, Y+5	; 0x05
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	91 05       	cpc	r25, r1
 6a6:	34 f4       	brge	.+12     	; 0x6b4 <DIO_U8GetPinValue+0x3c>
 6a8:	2c 81       	ldd	r18, Y+4	; 0x04
 6aa:	3d 81       	ldd	r19, Y+5	; 0x05
 6ac:	21 15       	cp	r18, r1
 6ae:	31 05       	cpc	r19, r1
 6b0:	61 f0       	breq	.+24     	; 0x6ca <DIO_U8GetPinValue+0x52>
 6b2:	52 c0       	rjmp	.+164    	; 0x758 <DIO_U8GetPinValue+0xe0>
 6b4:	4c 81       	ldd	r20, Y+4	; 0x04
 6b6:	5d 81       	ldd	r21, Y+5	; 0x05
 6b8:	42 30       	cpi	r20, 0x02	; 2
 6ba:	51 05       	cpc	r21, r1
 6bc:	51 f1       	breq	.+84     	; 0x712 <DIO_U8GetPinValue+0x9a>
 6be:	8c 81       	ldd	r24, Y+4	; 0x04
 6c0:	9d 81       	ldd	r25, Y+5	; 0x05
 6c2:	83 30       	cpi	r24, 0x03	; 3
 6c4:	91 05       	cpc	r25, r1
 6c6:	b9 f1       	breq	.+110    	; 0x736 <DIO_U8GetPinValue+0xbe>
 6c8:	47 c0       	rjmp	.+142    	; 0x758 <DIO_U8GetPinValue+0xe0>
    {
        case 0 : Local_U8Value = GET_BIT(PINA,Copy_U8Pin); break;
 6ca:	e9 e3       	ldi	r30, 0x39	; 57
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	28 2f       	mov	r18, r24
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	88 2f       	mov	r24, r24
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	a9 01       	movw	r20, r18
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_U8GetPinValue+0x6a>
 6de:	55 95       	asr	r21
 6e0:	47 95       	ror	r20
 6e2:	8a 95       	dec	r24
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_U8GetPinValue+0x66>
 6e6:	ca 01       	movw	r24, r20
 6e8:	81 70       	andi	r24, 0x01	; 1
 6ea:	89 83       	std	Y+1, r24	; 0x01
 6ec:	35 c0       	rjmp	.+106    	; 0x758 <DIO_U8GetPinValue+0xe0>
        case 1 : Local_U8Value = GET_BIT(PINB,Copy_U8Pin); break;
 6ee:	e6 e3       	ldi	r30, 0x36	; 54
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	88 2f       	mov	r24, r24
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	a9 01       	movw	r20, r18
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_U8GetPinValue+0x8e>
 702:	55 95       	asr	r21
 704:	47 95       	ror	r20
 706:	8a 95       	dec	r24
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_U8GetPinValue+0x8a>
 70a:	ca 01       	movw	r24, r20
 70c:	81 70       	andi	r24, 0x01	; 1
 70e:	89 83       	std	Y+1, r24	; 0x01
 710:	23 c0       	rjmp	.+70     	; 0x758 <DIO_U8GetPinValue+0xe0>
        case 2 : Local_U8Value = GET_BIT(PINC,Copy_U8Pin); break;
 712:	e3 e3       	ldi	r30, 0x33	; 51
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	28 2f       	mov	r18, r24
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	88 2f       	mov	r24, r24
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	a9 01       	movw	r20, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_U8GetPinValue+0xb2>
 726:	55 95       	asr	r21
 728:	47 95       	ror	r20
 72a:	8a 95       	dec	r24
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_U8GetPinValue+0xae>
 72e:	ca 01       	movw	r24, r20
 730:	81 70       	andi	r24, 0x01	; 1
 732:	89 83       	std	Y+1, r24	; 0x01
 734:	11 c0       	rjmp	.+34     	; 0x758 <DIO_U8GetPinValue+0xe0>
        case 3 : Local_U8Value = GET_BIT(PIND,Copy_U8Pin); break;
 736:	e0 e3       	ldi	r30, 0x30	; 48
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	8b 81       	ldd	r24, Y+3	; 0x03
 742:	88 2f       	mov	r24, r24
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	a9 01       	movw	r20, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_U8GetPinValue+0xd6>
 74a:	55 95       	asr	r21
 74c:	47 95       	ror	r20
 74e:	8a 95       	dec	r24
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_U8GetPinValue+0xd2>
 752:	ca 01       	movw	r24, r20
 754:	81 70       	andi	r24, 0x01	; 1
 756:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_U8Value;    
 758:	89 81       	ldd	r24, Y+1	; 0x01
}
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <DIO_U8GetPortValue>:

u8 DIO_U8GetPortValue(u8 Copy_U8Port)
{
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	00 d0       	rcall	.+0      	; 0x770 <DIO_U8GetPortValue+0x6>
 770:	00 d0       	rcall	.+0      	; 0x772 <DIO_U8GetPortValue+0x8>
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Value;
	switch(Copy_U8Port)
 778:	8a 81       	ldd	r24, Y+2	; 0x02
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	3c 83       	std	Y+4, r19	; 0x04
 780:	2b 83       	std	Y+3, r18	; 0x03
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	9c 81       	ldd	r25, Y+4	; 0x04
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	91 05       	cpc	r25, r1
 78a:	d1 f0       	breq	.+52     	; 0x7c0 <DIO_U8GetPortValue+0x56>
 78c:	2b 81       	ldd	r18, Y+3	; 0x03
 78e:	3c 81       	ldd	r19, Y+4	; 0x04
 790:	22 30       	cpi	r18, 0x02	; 2
 792:	31 05       	cpc	r19, r1
 794:	2c f4       	brge	.+10     	; 0x7a0 <DIO_U8GetPortValue+0x36>
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	9c 81       	ldd	r25, Y+4	; 0x04
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	61 f0       	breq	.+24     	; 0x7b6 <DIO_U8GetPortValue+0x4c>
 79e:	1e c0       	rjmp	.+60     	; 0x7dc <DIO_U8GetPortValue+0x72>
 7a0:	2b 81       	ldd	r18, Y+3	; 0x03
 7a2:	3c 81       	ldd	r19, Y+4	; 0x04
 7a4:	22 30       	cpi	r18, 0x02	; 2
 7a6:	31 05       	cpc	r19, r1
 7a8:	81 f0       	breq	.+32     	; 0x7ca <DIO_U8GetPortValue+0x60>
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	9c 81       	ldd	r25, Y+4	; 0x04
 7ae:	83 30       	cpi	r24, 0x03	; 3
 7b0:	91 05       	cpc	r25, r1
 7b2:	81 f0       	breq	.+32     	; 0x7d4 <DIO_U8GetPortValue+0x6a>
 7b4:	13 c0       	rjmp	.+38     	; 0x7dc <DIO_U8GetPortValue+0x72>
	{
		case 0 : Local_U8Value = PINA; break;
 7b6:	e9 e3       	ldi	r30, 0x39	; 57
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	89 83       	std	Y+1, r24	; 0x01
 7be:	0e c0       	rjmp	.+28     	; 0x7dc <DIO_U8GetPortValue+0x72>
		case 1 : Local_U8Value = PINB; break;
 7c0:	e6 e3       	ldi	r30, 0x36	; 54
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	80 81       	ld	r24, Z
 7c6:	89 83       	std	Y+1, r24	; 0x01
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <DIO_U8GetPortValue+0x72>
		case 2 : Local_U8Value = PINC; break;
 7ca:	e3 e3       	ldi	r30, 0x33	; 51
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <DIO_U8GetPortValue+0x72>
		case 3 : Local_U8Value = PIND; break;
 7d4:	e0 e3       	ldi	r30, 0x30	; 48
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8Value;
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
}
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	cf 91       	pop	r28
 7e8:	df 91       	pop	r29
 7ea:	08 95       	ret

000007ec <MCP2515_U8ReadRegister>:
#include "MCP2515_Interface.h"
#include "MCP2515_Private.h"


u8 MCP2515_U8ReadRegister(u8 address)
{
 7ec:	df 93       	push	r29
 7ee:	cf 93       	push	r28
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <MCP2515_U8ReadRegister+0x6>
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	8a 83       	std	Y+2, r24	; 0x02
	u8 readValue;
	SPI_VidChipSelect(1);
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_READ);
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(address);
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	readValue = SPI_U8MasterTransmit(0);
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
 810:	89 83       	std	Y+1, r24	; 0x01
	SPI_VidChipSelect(0);
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>

	return readValue;
 818:	89 81       	ldd	r24, Y+1	; 0x01
}
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	cf 91       	pop	r28
 820:	df 91       	pop	r29
 822:	08 95       	ret

00000824 <MCP2515_VidWriteRegister>:

void MCP2515_VidWriteRegister(u8 address, u8 value)
{
 824:	df 93       	push	r29
 826:	cf 93       	push	r28
 828:	00 d0       	rcall	.+0      	; 0x82a <MCP2515_VidWriteRegister+0x6>
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	89 83       	std	Y+1, r24	; 0x01
 830:	6a 83       	std	Y+2, r22	; 0x02
	SPI_VidChipSelect(1);
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_WRITE);
 838:	82 e0       	ldi	r24, 0x02	; 2
 83a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(address);
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(value);
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
}
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	cf 91       	pop	r28
 856:	df 91       	pop	r29
 858:	08 95       	ret

0000085a <MCP2515_VidSetBitTiming>:

void MCP2515_VidSetBitTiming(u8 cnf1Value, u8 cnf2Value, u8 cnf3Value)
{
 85a:	df 93       	push	r29
 85c:	cf 93       	push	r28
 85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
 860:	0f 92       	push	r0
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
 866:	89 83       	std	Y+1, r24	; 0x01
 868:	6a 83       	std	Y+2, r22	; 0x02
 86a:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_VidWriteRegister(CNF1, cnf1Value);
 86c:	8a e2       	ldi	r24, 0x2A	; 42
 86e:	69 81       	ldd	r22, Y+1	; 0x01
 870:	0e 94 12 04 	call	0x824	; 0x824 <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister(CNF2, cnf2Value);
 874:	89 e2       	ldi	r24, 0x29	; 41
 876:	6a 81       	ldd	r22, Y+2	; 0x02
 878:	0e 94 12 04 	call	0x824	; 0x824 <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister(CNF3, cnf3Value);
 87c:	88 e2       	ldi	r24, 0x28	; 40
 87e:	6b 81       	ldd	r22, Y+3	; 0x03
 880:	0e 94 12 04 	call	0x824	; 0x824 <MCP2515_VidWriteRegister>
}
 884:	0f 90       	pop	r0
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	cf 91       	pop	r28
 88c:	df 91       	pop	r29
 88e:	08 95       	ret

00000890 <MCP2515_VidReset>:

void MCP2515_VidReset()
{
 890:	df 93       	push	r29
 892:	cf 93       	push	r28
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
	SPI_VidChipSelect(1);
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_RESET);
 89e:	80 ec       	ldi	r24, 0xC0	; 192
 8a0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
}
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <MCP2515_VidChangeBits>:

void MCP2515_VidChangeBits(u8 RegAddress, u8 Mask, u8 Value)
{
 8b0:	df 93       	push	r29
 8b2:	cf 93       	push	r28
 8b4:	00 d0       	rcall	.+0      	; 0x8b6 <MCP2515_VidChangeBits+0x6>
 8b6:	0f 92       	push	r0
 8b8:	cd b7       	in	r28, 0x3d	; 61
 8ba:	de b7       	in	r29, 0x3e	; 62
 8bc:	89 83       	std	Y+1, r24	; 0x01
 8be:	6a 83       	std	Y+2, r22	; 0x02
 8c0:	4b 83       	std	Y+3, r20	; 0x03
	SPI_VidChipSelect(1);
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_BIT_MODIFY);
 8c8:	85 e0       	ldi	r24, 0x05	; 5
 8ca:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(RegAddress);
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(Mask);
 8d4:	8a 81       	ldd	r24, Y+2	; 0x02
 8d6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(Value);
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
}
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	cf 91       	pop	r28
 8ee:	df 91       	pop	r29
 8f0:	08 95       	ret

000008f2 <MCP2515_VidSetMode>:

void MCP2515_VidSetMode(u8 mode)
{
 8f2:	df 93       	push	r29
 8f4:	cf 93       	push	r28
 8f6:	0f 92       	push	r0
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62
 8fc:	89 83       	std	Y+1, r24	; 0x01

	MCP2515_VidChangeBits(CANCTRL, 0xE0, mode << 5);
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	98 2f       	mov	r25, r24
 902:	92 95       	swap	r25
 904:	99 0f       	add	r25, r25
 906:	90 7e       	andi	r25, 0xE0	; 224
 908:	8f e0       	ldi	r24, 0x0F	; 15
 90a:	60 ee       	ldi	r22, 0xE0	; 224
 90c:	49 2f       	mov	r20, r25
 90e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCP2515_VidChangeBits>
	while((MCP2515_U8ReadRegister(CANSTAT)>>5) != mode );
 912:	8e e0       	ldi	r24, 0x0E	; 14
 914:	0e 94 f6 03 	call	0x7ec	; 0x7ec <MCP2515_U8ReadRegister>
 918:	98 2f       	mov	r25, r24
 91a:	92 95       	swap	r25
 91c:	96 95       	lsr	r25
 91e:	97 70       	andi	r25, 0x07	; 7
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	98 17       	cp	r25, r24
 924:	b1 f7       	brne	.-20     	; 0x912 <MCP2515_VidSetMode+0x20>
}
 926:	0f 90       	pop	r0
 928:	cf 91       	pop	r28
 92a:	df 91       	pop	r29
 92c:	08 95       	ret

0000092e <MCP2515_VidInit>:

void MCP2515_VidInit(void)
{
 92e:	df 93       	push	r29
 930:	cf 93       	push	r28
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
	SPI_VidMasterInit();
 936:	0e 94 28 05 	call	0xa50	; 0xa50 <SPI_VidMasterInit>
	MCP2515_VidReset();
 93a:	0e 94 48 04 	call	0x890	; 0x890 <MCP2515_VidReset>

//	// enter configuration mode and enable CLKOUT with no prescaler
	MCP2515_VidWriteRegister(CANCTRL, 0x84);
 93e:	8f e0       	ldi	r24, 0x0F	; 15
 940:	64 e8       	ldi	r22, 0x84	; 132
 942:	0e 94 12 04 	call	0x824	; 0x824 <MCP2515_VidWriteRegister>
	while((MCP2515_U8ReadRegister(CANSTAT)>>5) != MCP2515_MODE_CONFG);
 946:	8e e0       	ldi	r24, 0x0E	; 14
 948:	0e 94 f6 03 	call	0x7ec	; 0x7ec <MCP2515_U8ReadRegister>
 94c:	82 95       	swap	r24
 94e:	86 95       	lsr	r24
 950:	87 70       	andi	r24, 0x07	; 7
 952:	84 30       	cpi	r24, 0x04	; 4
 954:	c1 f7       	brne	.-16     	; 0x946 <MCP2515_VidInit+0x18>
//	// to run at 250KHz bitrate using 8MHz osc
	MCP2515_VidSetBitTiming((2<<6), (1<<7)|(6<<3)|(1), (5));
 956:	80 e8       	ldi	r24, 0x80	; 128
 958:	61 eb       	ldi	r22, 0xB1	; 177
 95a:	45 e0       	ldi	r20, 0x05	; 5
 95c:	0e 94 2d 04 	call	0x85a	; 0x85a <MCP2515_VidSetBitTiming>

	MCP2515_VidSetMode(MCP2515_MODE_NORMAL);
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	0e 94 79 04 	call	0x8f2	; 0x8f2 <MCP2515_VidSetMode>
}
 966:	cf 91       	pop	r28
 968:	df 91       	pop	r29
 96a:	08 95       	ret

0000096c <MCP2515_VidSendCANmsg>:


void MCP2515_VidSendCANmsg(u8 bufIdx, u32 msgID, u8 * data,u8 properties)
{
 96c:	0f 93       	push	r16
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	29 97       	sbiw	r28, 0x09	; 9
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	f8 94       	cli
 97c:	de bf       	out	0x3e, r29	; 62
 97e:	0f be       	out	0x3f, r0	; 63
 980:	cd bf       	out	0x3d, r28	; 61
 982:	8a 83       	std	Y+2, r24	; 0x02
 984:	4b 83       	std	Y+3, r20	; 0x03
 986:	5c 83       	std	Y+4, r21	; 0x04
 988:	6d 83       	std	Y+5, r22	; 0x05
 98a:	7e 83       	std	Y+6, r23	; 0x06
 98c:	38 87       	std	Y+8, r19	; 0x08
 98e:	2f 83       	std	Y+7, r18	; 0x07
 990:	09 87       	std	Y+9, r16	; 0x09
	SPI_VidChipSelect(1);
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
	/* Send header and address */
	SPI_U8MasterTransmit(INST_WRITE);
 998:	82 e0       	ldi	r24, 0x02	; 2
 99a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(TXB0CTRL);
 99e:	80 e3       	ldi	r24, 0x30	; 48
 9a0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
    
	/* Setup message priority */
	SPI_U8MasterTransmit(properties >> 6);
 9a4:	89 85       	ldd	r24, Y+9	; 0x09
 9a6:	82 95       	swap	r24
 9a8:	86 95       	lsr	r24
 9aa:	86 95       	lsr	r24
 9ac:	83 70       	andi	r24, 0x03	; 3
 9ae:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	/* Setup standard or extended identifier */
		SPI_U8MasterTransmit((u8)(msgID>>3));
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	9c 81       	ldd	r25, Y+4	; 0x04
 9b6:	ad 81       	ldd	r26, Y+5	; 0x05
 9b8:	be 81       	ldd	r27, Y+6	; 0x06
 9ba:	68 94       	set
 9bc:	12 f8       	bld	r1, 2
 9be:	b6 95       	lsr	r27
 9c0:	a7 95       	ror	r26
 9c2:	97 95       	ror	r25
 9c4:	87 95       	ror	r24
 9c6:	16 94       	lsr	r1
 9c8:	d1 f7       	brne	.-12     	; 0x9be <MCP2515_VidSendCANmsg+0x52>
 9ca:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
		SPI_U8MasterTransmit((u8)(msgID<<5));
 9ce:	8b 81       	ldd	r24, Y+3	; 0x03
 9d0:	82 95       	swap	r24
 9d2:	88 0f       	add	r24, r24
 9d4:	80 7e       	andi	r24, 0xE0	; 224
 9d6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
		SPI_U8MasterTransmit(0);
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
		SPI_U8MasterTransmit(0);
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
        
	/* Setup message length and RTR bit */
	SPI_U8MasterTransmit(properties & 0x0F);
 9e6:	89 85       	ldd	r24, Y+9	; 0x09
 9e8:	8f 70       	andi	r24, 0x0F	; 15
 9ea:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
    
	/* Store the message into the buffer */
	for(u8 i = 0; i < (properties & 0x0F); i++)
 9ee:	19 82       	std	Y+1, r1	; 0x01
 9f0:	0e c0       	rjmp	.+28     	; 0xa0e <MCP2515_VidSendCANmsg+0xa2>
		SPI_U8MasterTransmit(data[i]);
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	28 2f       	mov	r18, r24
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	8f 81       	ldd	r24, Y+7	; 0x07
 9fa:	98 85       	ldd	r25, Y+8	; 0x08
 9fc:	fc 01       	movw	r30, r24
 9fe:	e2 0f       	add	r30, r18
 a00:	f3 1f       	adc	r31, r19
 a02:	80 81       	ld	r24, Z
 a04:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
        
	/* Setup message length and RTR bit */
	SPI_U8MasterTransmit(properties & 0x0F);
    
	/* Store the message into the buffer */
	for(u8 i = 0; i < (properties & 0x0F); i++)
 a08:	89 81       	ldd	r24, Y+1	; 0x01
 a0a:	8f 5f       	subi	r24, 0xFF	; 255
 a0c:	89 83       	std	Y+1, r24	; 0x01
 a0e:	89 81       	ldd	r24, Y+1	; 0x01
 a10:	28 2f       	mov	r18, r24
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	89 85       	ldd	r24, Y+9	; 0x09
 a16:	88 2f       	mov	r24, r24
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	8f 70       	andi	r24, 0x0F	; 15
 a1c:	90 70       	andi	r25, 0x00	; 0
 a1e:	28 17       	cp	r18, r24
 a20:	39 07       	cpc	r19, r25
 a22:	3c f3       	brlt	.-50     	; 0x9f2 <MCP2515_VidSendCANmsg+0x86>
		SPI_U8MasterTransmit(data[i]);
    
	/* Release the bus */
	SPI_VidChipSelect(0);
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
    
	/* Send request to send */
	SPI_VidChipSelect(1);
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
	SPI_U8MasterTransmit(INST_RTS_TXB0);
 a30:	81 e8       	ldi	r24, 0x81	; 129
 a32:	0e 94 bf 05 	call	0xb7e	; 0xb7e <SPI_U8MasterTransmit>
	SPI_VidChipSelect(0);
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	0e 94 a7 05 	call	0xb4e	; 0xb4e <SPI_VidChipSelect>
}
 a3c:	29 96       	adiw	r28, 0x09	; 9
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	f8 94       	cli
 a42:	de bf       	out	0x3e, r29	; 62
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	cd bf       	out	0x3d, r28	; 61
 a48:	cf 91       	pop	r28
 a4a:	df 91       	pop	r29
 a4c:	0f 91       	pop	r16
 a4e:	08 95       	ret

00000a50 <SPI_VidMasterInit>:
#include "SPI_Registers.h"
#include "SPI_Interface.h"
#include "DIO_Interface.h"

void SPI_VidMasterInit(void)
{
 a50:	df 93       	push	r29
 a52:	cf 93       	push	r28
 a54:	0f 92       	push	r0
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62
	u8 temp_SPCR = 0;
 a5a:	19 82       	std	Y+1, r1	; 0x01

	// Set MOSI pin direction output
	DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	65 e0       	ldi	r22, 0x05	; 5
 a60:	41 e0       	ldi	r20, 0x01	; 1
 a62:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>
	// Set MISO pin direction input with pull-up resistance (Not necessary)
	DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN6, DIO_INPUT);
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	66 e0       	ldi	r22, 0x06	; 6
 a6a:	40 e0       	ldi	r20, 0x00	; 0
 a6c:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN6, DIO_HIGH);
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	66 e0       	ldi	r22, 0x06	; 6
 a74:	41 e0       	ldi	r20, 0x01	; 1
 a76:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_VidSetPinValue>
	// Set clock pin direction output with
	DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	67 e0       	ldi	r22, 0x07	; 7
 a7e:	41 e0       	ldi	r20, 0x01	; 1
 a80:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>
//	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN7, DIO_LOW);

	// enable SPI
	SET_BIT(temp_SPCR, 6);
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	80 64       	ori	r24, 0x40	; 64
 a88:	89 83       	std	Y+1, r24	; 0x01

	// data order >>>> transmit MSB first
	CLR_BIT(temp_SPCR, 5);
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
 a8c:	8f 7d       	andi	r24, 0xDF	; 223
 a8e:	89 83       	std	Y+1, r24	; 0x01

	// configure SS pin as output and choose master spi mode
	DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	64 e0       	ldi	r22, 0x04	; 4
 a94:	41 e0       	ldi	r20, 0x01	; 1
 a96:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	64 e0       	ldi	r22, 0x04	; 4
 a9e:	41 e0       	ldi	r20, 0x01	; 1
 aa0:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_VidSetPinValue>
	SET_BIT(temp_SPCR, 4);
 aa4:	89 81       	ldd	r24, Y+1	; 0x01
 aa6:	80 61       	ori	r24, 0x10	; 16
 aa8:	89 83       	std	Y+1, r24	; 0x01


	// clock polarity >>> leading rising edge
	CLR_BIT(temp_SPCR, 3);
 aaa:	89 81       	ldd	r24, Y+1	; 0x01
 aac:	87 7f       	andi	r24, 0xF7	; 247
 aae:	89 83       	std	Y+1, r24	; 0x01

	// clock phase >>>> sampling at rising edge
	CLR_BIT(temp_SPCR, 2);
 ab0:	89 81       	ldd	r24, Y+1	; 0x01
 ab2:	8b 7f       	andi	r24, 0xFB	; 251
 ab4:	89 83       	std	Y+1, r24	; 0x01

	// clock oscillator >> F_CPU / 4
	CLR_BIT(temp_SPCR, 1);
 ab6:	89 81       	ldd	r24, Y+1	; 0x01
 ab8:	8d 7f       	andi	r24, 0xFD	; 253
 aba:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(temp_SPCR, 0);
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	8e 7f       	andi	r24, 0xFE	; 254
 ac0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(SPSR, 0);
 ac2:	ae e2       	ldi	r26, 0x2E	; 46
 ac4:	b0 e0       	ldi	r27, 0x00	; 0
 ac6:	ee e2       	ldi	r30, 0x2E	; 46
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	80 81       	ld	r24, Z
 acc:	8e 7f       	andi	r24, 0xFE	; 254
 ace:	8c 93       	st	X, r24

	SPCR = temp_SPCR;
 ad0:	ed e2       	ldi	r30, 0x2D	; 45
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	89 81       	ldd	r24, Y+1	; 0x01
 ad6:	80 83       	st	Z, r24
}
 ad8:	0f 90       	pop	r0
 ada:	cf 91       	pop	r28
 adc:	df 91       	pop	r29
 ade:	08 95       	ret

00000ae0 <SPI_VidSlaveInit>:

void SPI_VidSlaveInit(void)
{
 ae0:	df 93       	push	r29
 ae2:	cf 93       	push	r28
 ae4:	0f 92       	push	r0
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
	u8 temp_SPCR=0;
 aea:	19 82       	std	Y+1, r1	; 0x01
	// enable SPI
	SET_BIT(temp_SPCR, 6);
 aec:	89 81       	ldd	r24, Y+1	; 0x01
 aee:	80 64       	ori	r24, 0x40	; 64
 af0:	89 83       	std	Y+1, r24	; 0x01

	// data order >>>> transmit LSB first
	SET_BIT(temp_SPCR, 5);
 af2:	89 81       	ldd	r24, Y+1	; 0x01
 af4:	80 62       	ori	r24, 0x20	; 32
 af6:	89 83       	std	Y+1, r24	; 0x01

	// configure SS pin as output and choose master spi mode
	DIO_VidSetPinDirection(DIO_PORTB, DIO_PIN4, DIO_INPUT);
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	64 e0       	ldi	r22, 0x04	; 4
 afc:	40 e0       	ldi	r20, 0x00	; 0
 afe:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	64 e0       	ldi	r22, 0x04	; 4
 b06:	41 e0       	ldi	r20, 0x01	; 1
 b08:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_VidSetPinValue>
	CLR_BIT(temp_SPCR, 4);
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	8f 7e       	andi	r24, 0xEF	; 239
 b10:	89 83       	std	Y+1, r24	; 0x01



	// clock polarity >>> leading rising edge
	CLR_BIT(temp_SPCR, 3);
 b12:	89 81       	ldd	r24, Y+1	; 0x01
 b14:	87 7f       	andi	r24, 0xF7	; 247
 b16:	89 83       	std	Y+1, r24	; 0x01

	// clock phase >>>> setup at leading then sample at trailing
	SET_BIT(temp_SPCR, 2);
 b18:	89 81       	ldd	r24, Y+1	; 0x01
 b1a:	84 60       	ori	r24, 0x04	; 4
 b1c:	89 83       	std	Y+1, r24	; 0x01

	// clock oscillator >> F_CPU / 4
	CLR_BIT(temp_SPCR, 1);
 b1e:	89 81       	ldd	r24, Y+1	; 0x01
 b20:	8d 7f       	andi	r24, 0xFD	; 253
 b22:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(temp_SPCR, 0);
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	8e 7f       	andi	r24, 0xFE	; 254
 b28:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(SPSR, 0);
 b2a:	ae e2       	ldi	r26, 0x2E	; 46
 b2c:	b0 e0       	ldi	r27, 0x00	; 0
 b2e:	ee e2       	ldi	r30, 0x2E	; 46
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	80 81       	ld	r24, Z
 b34:	8e 7f       	andi	r24, 0xFE	; 254
 b36:	8c 93       	st	X, r24

	// enable interrupt
	SET_BIT(temp_SPCR, 7);
 b38:	89 81       	ldd	r24, Y+1	; 0x01
 b3a:	80 68       	ori	r24, 0x80	; 128
 b3c:	89 83       	std	Y+1, r24	; 0x01

	SPCR = temp_SPCR;
 b3e:	ed e2       	ldi	r30, 0x2D	; 45
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	89 81       	ldd	r24, Y+1	; 0x01
 b44:	80 83       	st	Z, r24
}
 b46:	0f 90       	pop	r0
 b48:	cf 91       	pop	r28
 b4a:	df 91       	pop	r29
 b4c:	08 95       	ret

00000b4e <SPI_VidChipSelect>:

void SPI_VidChipSelect(u8 state)
{
 b4e:	df 93       	push	r29
 b50:	cf 93       	push	r28
 b52:	0f 92       	push	r0
 b54:	cd b7       	in	r28, 0x3d	; 61
 b56:	de b7       	in	r29, 0x3e	; 62
 b58:	89 83       	std	Y+1, r24	; 0x01
	if(state == 1)
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
 b5c:	81 30       	cpi	r24, 0x01	; 1
 b5e:	31 f4       	brne	.+12     	; 0xb6c <SPI_VidChipSelect+0x1e>
	{
		DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_LOW);
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	64 e0       	ldi	r22, 0x04	; 4
 b64:	40 e0       	ldi	r20, 0x00	; 0
 b66:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_VidSetPinValue>
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <SPI_VidChipSelect+0x28>
	}
	else
	{
		DIO_VidSetPinValue(DIO_PORTB, DIO_PIN4, DIO_HIGH);
 b6c:	81 e0       	ldi	r24, 0x01	; 1
 b6e:	64 e0       	ldi	r22, 0x04	; 4
 b70:	41 e0       	ldi	r20, 0x01	; 1
 b72:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_VidSetPinValue>
	}
}
 b76:	0f 90       	pop	r0
 b78:	cf 91       	pop	r28
 b7a:	df 91       	pop	r29
 b7c:	08 95       	ret

00000b7e <SPI_U8MasterTransmit>:


u8 SPI_U8MasterTransmit(u8 Local_U8Data)
{
 b7e:	df 93       	push	r29
 b80:	cf 93       	push	r28
 b82:	00 d0       	rcall	.+0      	; 0xb84 <SPI_U8MasterTransmit+0x6>
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62
 b88:	8a 83       	std	Y+2, r24	; 0x02
	u8 dataRead=0;
 b8a:	19 82       	std	Y+1, r1	; 0x01
	SPDR = Local_U8Data;
 b8c:	ef e2       	ldi	r30, 0x2F	; 47
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	8a 81       	ldd	r24, Y+2	; 0x02
 b92:	80 83       	st	Z, r24
	while(GET_BIT(SPSR, 7)==0);
 b94:	ee e2       	ldi	r30, 0x2E	; 46
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	80 81       	ld	r24, Z
 b9a:	88 23       	and	r24, r24
 b9c:	dc f7       	brge	.-10     	; 0xb94 <SPI_U8MasterTransmit+0x16>
	dataRead = SPDR;
 b9e:	ef e2       	ldi	r30, 0x2F	; 47
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	89 83       	std	Y+1, r24	; 0x01
	return dataRead;
 ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
 ba8:	0f 90       	pop	r0
 baa:	0f 90       	pop	r0
 bac:	cf 91       	pop	r28
 bae:	df 91       	pop	r29
 bb0:	08 95       	ret

00000bb2 <UART_voidInit>:

#include "UART_interface.h"
#include "UART_register.h"

void UART_voidInit(void)
{
 bb2:	df 93       	push	r29
 bb4:	cf 93       	push	r28
 bb6:	cd b7       	in	r28, 0x3d	; 61
 bb8:	de b7       	in	r29, 0x3e	; 62
  // Set BaudRate -> 9600/16MhZ
  UBRRL = 51;
 bba:	e9 e2       	ldi	r30, 0x29	; 41
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	83 e3       	ldi	r24, 0x33	; 51
 bc0:	80 83       	st	Z, r24
  UBRRH = 0;
 bc2:	e0 e4       	ldi	r30, 0x40	; 64
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	10 82       	st	Z, r1
  // Set Frame Format -> 8 data, 1 stop, No Parity
  UCSRC = 0x86;
 bc8:	e0 e4       	ldi	r30, 0x40	; 64
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	86 e8       	ldi	r24, 0x86	; 134
 bce:	80 83       	st	Z, r24
  // Enable RX and TX
  UCSRB = 0x18;
 bd0:	ea e2       	ldi	r30, 0x2A	; 42
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	88 e1       	ldi	r24, 0x18	; 24
 bd6:	80 83       	st	Z, r24
}
 bd8:	cf 91       	pop	r28
 bda:	df 91       	pop	r29
 bdc:	08 95       	ret

00000bde <UART_voidSendChar>:

void UART_voidSendChar(u8 data)
{
 bde:	df 93       	push	r29
 be0:	cf 93       	push	r28
 be2:	0f 92       	push	r0
 be4:	cd b7       	in	r28, 0x3d	; 61
 be6:	de b7       	in	r29, 0x3e	; 62
 be8:	89 83       	std	Y+1, r24	; 0x01
  // Wait until transmission Register Empty
  while((UCSRA&0x20) == 0x00);
 bea:	eb e2       	ldi	r30, 0x2B	; 43
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	80 81       	ld	r24, Z
 bf0:	88 2f       	mov	r24, r24
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	80 72       	andi	r24, 0x20	; 32
 bf6:	90 70       	andi	r25, 0x00	; 0
 bf8:	00 97       	sbiw	r24, 0x00	; 0
 bfa:	b9 f3       	breq	.-18     	; 0xbea <UART_voidSendChar+0xc>
  UDR_T = data;
 bfc:	ec e2       	ldi	r30, 0x2C	; 44
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	89 81       	ldd	r24, Y+1	; 0x01
 c02:	80 83       	st	Z, r24
}
 c04:	0f 90       	pop	r0
 c06:	cf 91       	pop	r28
 c08:	df 91       	pop	r29
 c0a:	08 95       	ret

00000c0c <UART_voidGetChar>:

u8 UART_voidGetChar(void)
{
 c0c:	df 93       	push	r29
 c0e:	cf 93       	push	r28
 c10:	0f 92       	push	r0
 c12:	cd b7       	in	r28, 0x3d	; 61
 c14:	de b7       	in	r29, 0x3e	; 62
  u8 Result;
  // Wait until Reception Complete
  while((UCSRA&0x80) == 0x00);
 c16:	eb e2       	ldi	r30, 0x2B	; 43
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	80 81       	ld	r24, Z
 c1c:	88 23       	and	r24, r24
 c1e:	dc f7       	brge	.-10     	; 0xc16 <UART_voidGetChar+0xa>
  Result = UDR_R;
 c20:	ec e2       	ldi	r30, 0x2C	; 44
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	80 81       	ld	r24, Z
 c26:	89 83       	std	Y+1, r24	; 0x01
  
  /* Clear Flag */
  SET_BIT(UCSRA,7);
 c28:	ab e2       	ldi	r26, 0x2B	; 43
 c2a:	b0 e0       	ldi	r27, 0x00	; 0
 c2c:	eb e2       	ldi	r30, 0x2B	; 43
 c2e:	f0 e0       	ldi	r31, 0x00	; 0
 c30:	80 81       	ld	r24, Z
 c32:	80 68       	ori	r24, 0x80	; 128
 c34:	8c 93       	st	X, r24
  return Result;
 c36:	89 81       	ldd	r24, Y+1	; 0x01
  
}
 c38:	0f 90       	pop	r0
 c3a:	cf 91       	pop	r28
 c3c:	df 91       	pop	r29
 c3e:	08 95       	ret

00000c40 <main>:
#include "MCP2515_Interface.h"
#include "UART_interface.h"
#include <util/delay.h>

void main(void)
{
 c40:	0f 93       	push	r16
 c42:	df 93       	push	r29
 c44:	cf 93       	push	r28
 c46:	0f 92       	push	r0
 c48:	cd b7       	in	r28, 0x3d	; 61
 c4a:	de b7       	in	r29, 0x3e	; 62

	MCP2515_VidInit();
 c4c:	0e 94 97 04 	call	0x92e	; 0x92e <MCP2515_VidInit>

	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);
 c50:	83 e0       	ldi	r24, 0x03	; 3
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	40 e0       	ldi	r20, 0x00	; 0
 c56:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
 c5a:	83 e0       	ldi	r24, 0x03	; 3
 c5c:	61 e0       	ldi	r22, 0x01	; 1
 c5e:	41 e0       	ldi	r20, 0x01	; 1
 c60:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
 c64:	83 e0       	ldi	r24, 0x03	; 3
 c66:	65 e0       	ldi	r22, 0x05	; 5
 c68:	41 e0       	ldi	r20, 0x01	; 1
 c6a:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_VidSetPinDirection>

	UART_voidInit();
 c6e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <UART_voidInit>

	u8 Var = 0 ;
 c72:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		Var = UART_voidGetChar();
 c74:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_voidGetChar>
 c78:	89 83       	std	Y+1, r24	; 0x01

		if (Var == 'T')
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
 c7c:	84 35       	cpi	r24, 0x54	; 84
 c7e:	29 f4       	brne	.+10     	; 0xc8a <main+0x4a>
		{
			DIO_VidSetPinValue(DIO_PORTD ,DIO_PIN5 ,DIO_HIGH);
 c80:	83 e0       	ldi	r24, 0x03	; 3
 c82:	65 e0       	ldi	r22, 0x05	; 5
 c84:	41 e0       	ldi	r20, 0x01	; 1
 c86:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_VidSetPinValue>
		}

		MCP2515_VidSendCANmsg(0, 0x7E1, &Var, 1);
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	41 ee       	ldi	r20, 0xE1	; 225
 c8e:	57 e0       	ldi	r21, 0x07	; 7
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	9e 01       	movw	r18, r28
 c96:	2f 5f       	subi	r18, 0xFF	; 255
 c98:	3f 4f       	sbci	r19, 0xFF	; 255
 c9a:	01 e0       	ldi	r16, 0x01	; 1
 c9c:	0e 94 b6 04 	call	0x96c	; 0x96c <MCP2515_VidSendCANmsg>
 ca0:	e9 cf       	rjmp	.-46     	; 0xc74 <main+0x34>

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
